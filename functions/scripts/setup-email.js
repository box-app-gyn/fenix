#!/usr/bin/env node

/**
 * Script para configurar o sistema de email do Interbox 2025
 *
 * Uso:
 * node scripts/setup-email.js
 */

const {execSync} = require("child_process");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

/**
 * Faz uma pergunta ao usu√°rio via linha de comando
 * @param {string} prompt - A pergunta a ser exibida
 * @return {Promise<string>} Resposta do usu√°rio
 */
function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

/**
 * Exibe uma mensagem colorida no console
 * @param {string} message - Mensagem a ser exibida
 * @param {string} type - Tipo da mensagem (info, success, warning, error)
 */
function log(message, type = "info") {
  const colors = {
    info: "\x1b[36m", // Cyan
    success: "\x1b[32m", // Green
    warning: "\x1b[33m", // Yellow
    error: "\x1b[31m", // Red
    reset: "\x1b[0m", // Reset
  };

  console.log(`${colors[type]}${message}${colors.reset}`);
}

/**
 * Fun√ß√£o principal para configurar o sistema de email
 */
async function setupEmail() {
  log("üéØ Configura√ß√£o do Sistema de Email - Interbox 2025", "info");
  log("==================================================", "info");

  try {
    // Verificar se o Firebase CLI est√° instalado
    try {
      execSync("firebase --version", {stdio: "ignore"});
    } catch (error) {
      log("‚ùå Firebase CLI n√£o encontrado. Instale com: " +
          "npm install -g firebase-tools", "error");
      process.exit(1);
    }

    // Verificar se est√° logado no Firebase
    try {
      execSync("firebase projects:list", {stdio: "ignore"});
    } catch (error) {
      log("‚ùå N√£o logado no Firebase. Execute: firebase login", "error");
      process.exit(1);
    }

    log("‚úÖ Firebase CLI configurado", "success");

    // Escolher provedor de email
    log("\nüìß Escolha o provedor de email:", "info");
    log("1. Gmail (recomendado para desenvolvimento)", "info");
    log("2. SendGrid (recomendado para produ√ß√£o)", "info");
    log("3. Configurar ambos", "info");

    const providerChoice = await question("Digite sua escolha (1-3): ");

    if (providerChoice === "1" || providerChoice === "3") {
      await setupGmail();
    }

    if (providerChoice === "2" || providerChoice === "3") {
      await setupSendGrid();
    }

    // Configurar dom√≠nios permitidos
    await setupAllowedDomains();

    // Configurar templates
    await setupTemplates();

    log("\n‚úÖ Configura√ß√£o conclu√≠da com sucesso!", "success");
    log("\nüìã Pr√≥ximos passos:", "info");
    log("1. Teste o sistema: npm run test:email", "info");
    log("2. Deploy das fun√ß√µes: firebase deploy --only functions", "info");
    log("3. Verifique os logs: firebase functions:log", "info");
  } catch (error) {
    log(`‚ùå Erro durante a configura√ß√£o: ${error.message}`, "error");
    process.exit(1);
  } finally {
    rl.close();
  }
}

/**
 * Configura as credenciais do Gmail
 */
async function setupGmail() {
  log("\nüìß Configurando Gmail...", "info");

  const gmailUser = await question("Digite seu email Gmail: ");
  const gmailPassword = await question("Digite sua senha de app Gmail: ");

  if (!gmailUser || !gmailPassword) {
    log("‚ùå Email e senha s√£o obrigat√≥rios", "error");
    return;
  }

  try {
    execSync(`firebase functions:config:set email.user="${gmailUser}"`,
        {stdio: "ignore"});
    execSync(
        `firebase functions:config:set email.password="${gmailPassword}"`,
        {stdio: "ignore"},
    );

    log("‚úÖ Configura√ß√£o Gmail salva", "success");
    log("üí° Dica: Use senha de app, n√£o sua senha principal do Gmail",
        "warning");
  } catch (error) {
    log(`‚ùå Erro ao configurar Gmail: ${error.message}`, "error");
  }
}

/**
 * Configura as credenciais do SendGrid
 */
async function setupSendGrid() {
  log("\nüìß Configurando SendGrid...", "info");

  const sendgridApiKey = await question("Digite sua API Key do SendGrid: ");
  const sendgridFrom = await question(
      "Digite o email remetente (ex: noreply@interbox2025.com): ");

  if (!sendgridApiKey || !sendgridFrom) {
    log("‚ùå API Key e email remetente s√£o obrigat√≥rios", "error");
    return;
  }

  try {
    execSync(
        `firebase functions:config:set sendgrid.api_key="${sendgridApiKey}"`,
        {stdio: "ignore"},
    );
    execSync(`firebase functions:config:set sendgrid.from="${sendgridFrom}"`,
        {stdio: "ignore"});

    log("‚úÖ Configura√ß√£o SendGrid salva", "success");
  } catch (error) {
    log(`‚ùå Erro ao configurar SendGrid: ${error.message}`, "error");
  }
}

/**
 * Configura dom√≠nios de email permitidos
 */
async function setupAllowedDomains() {
  log("\nüåê Configurando dom√≠nios permitidos...", "info");

  const useRestriction = await question(
      "Deseja restringir dom√≠nios de email? (s/n): ",
  );

  if (useRestriction.toLowerCase() === "s") {
    const domains = await question(
        "Digite os dom√≠nios permitidos (separados por v√≠rgula): ");

    if (domains) {
      const domainList = domains.split(",").map((d) => d.trim());
      log(`‚úÖ Dom√≠nios configurados: ${domainList.join(", ")}`, "success");
      log("üí° Configure manualmente no arquivo config/email.ts", "warning");
    }
  } else {
    log("‚úÖ Sem restri√ß√£o de dom√≠nios", "success");
  }
}

/**
 * Configura templates de email
 */
async function setupTemplates() {
  log("\nüìù Configurando templates...", "info");

  log("‚úÖ Templates padr√£o configurados:", "success");
  log("  - Pedido confirmado", "info");
  log("  - Status audiovisual", "info");
  log("  - Notifica√ß√£o admin", "info");
  log("  - Boas-vindas", "info");

  const customizeTemplates = await question(
      "Deseja personalizar os templates? (s/n): ",
  );

  if (customizeTemplates.toLowerCase() === "s") {
    log("üí° Edite os templates no arquivo config/email.ts", "warning");
    log(
        "üí° Use vari√°veis: ${data.userName}, ${data.userEmail}, etc.",
        "warning",
    );
  }
}

/**
 * Testa a configura√ß√£o do sistema de email
 */
async function testEmailConfig() {
  log("\nüß™ Testando configura√ß√£o...", "info");

  try {
    // Verificar configura√ß√µes
    const config = execSync("firebase functions:config:get", {
      encoding: "utf8",
    });
    log("‚úÖ Configura√ß√µes carregadas", "success");

    // Verificar se h√° pelo menos um provedor configurado
    const configObj = JSON.parse(config);

    if (configObj.email || configObj.sendgrid) {
      log("‚úÖ Pelo menos um provedor configurado", "success");
    } else {
      log("‚ùå Nenhum provedor configurado", "error");
    }
  } catch (error) {
    log(`‚ùå Erro ao testar configura√ß√£o: ${error.message}`, "error");
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  setupEmail();
}

module.exports = {
  setupEmail,
  testEmailConfig,
};
