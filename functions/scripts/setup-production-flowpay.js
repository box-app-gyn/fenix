#!/usr/bin/env node

const {execSync} = require("child_process");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function question(query) {
  return new Promise((resolve) => rl.question(query, resolve));
}

function log(message, type = "info") {
  const colors = {
    info: "\x1b[36m", // Cyan
    success: "\x1b[32m", // Green
    warning: "\x1b[33m", // Yellow
    error: "\x1b[31m", // Red
    reset: "\x1b[0m", // Reset
  };

  console.log(`${colors[type]}${message}${colors.reset}`);
}

async function setupProductionFlowPay() {
  console.log("üöÄ Configura√ß√£o da FlowPay para Produ√ß√£o");
  console.log("==================================================\n");

  try {
    // 1. Verificar configura√ß√£o atual
    log("1. Verificando configura√ß√£o atual...", "info");

    try {
      const currentConfig = execSync("firebase functions:config:get", {encoding: "utf8"});
      console.log("üìã Configura√ß√£o atual:");
      console.log(currentConfig);
    } catch (error) {
      log("‚ö†Ô∏è  Nenhuma configura√ß√£o encontrada", "warning");
    }

    // 2. Configurar API Key da FlowPay
    log("\n2. Configurando API Key da FlowPay...", "info");

    const currentApiKey = execSync("firebase functions:config:get flowpay.api_key", {encoding: "utf8"}).trim();
    console.log("üîë API Key atual:", currentApiKey);

    const useCurrentKey = await question("Usar API Key atual? (s/n): ");

    let apiKey = currentApiKey;
    if (useCurrentKey.toLowerCase() !== "s") {
      apiKey = await question("Digite a nova API Key da FlowPay: ");
    }

    if (!apiKey) {
      log("‚ùå API Key √© obrigat√≥ria", "error");
      return;
    }

    // 3. Configurar dom√≠nio da FlowPay
    log("\n3. Configurando dom√≠nio da FlowPay...", "info");

    const flowpayDomain = await question("Dom√≠nio da FlowPay (padr√£o: https://flowpay.com/api): ") || "https://flowpay.com/api";

    // 4. Configurar modo de opera√ß√£o
    log("\n4. Configurando modo de opera√ß√£o...", "info");

    console.log("Escolha o modo de opera√ß√£o:");
    console.log("1. Modo Real (usa API da FlowPay)");
    console.log("2. Modo Simula√ß√£o (para testes sem pagamento real)");
    console.log("3. Modo H√≠brido (real quando poss√≠vel, simula√ß√£o como fallback)");

    const mode = await question("Escolha o modo (1/2/3): ");

    let operationMode = "hybrid";
    if (mode === "1") operationMode = "real";
    else if (mode === "2") operationMode = "simulation";
    else operationMode = "hybrid";

    // 5. Configurar URLs
    log("\n5. Configurando URLs...", "info");

    const appUrl = await question("URL do app em produ√ß√£o (padr√£o: https://interbox-app-8d400.web.app): ") || "https://interbox-app-8d400.web.app";
    const successUrl = `${appUrl}/audiovisual/success`;
    const webhookUrl = "https://us-central1-interbox-app-8d400.cloudfunctions.net/webhookFlowPay";

    // 6. Aplicar configura√ß√µes
    log("\n6. Aplicando configura√ß√µes...", "info");

    const configs = {
      "flowpay.api_key": apiKey,
      "flowpay.domain": flowpayDomain,
      "flowpay.mode": operationMode,
      "app.url": appUrl,
      "flowpay.success_url": successUrl,
      "flowpay.webhook_url": webhookUrl,
    };

    for (const [key, value] of Object.entries(configs)) {
      try {
        execSync(`firebase functions:config:set ${key}="${value}"`, {stdio: "pipe"});
        log(`‚úÖ ${key} configurado`, "success");
      } catch (error) {
        log(`‚ùå Erro ao configurar ${key}: ${error.message}`, "error");
      }
    }

    // 7. Build e deploy das functions
    log("\n7. Fazendo build e deploy das functions...", "info");

    try {
      execSync("npm run build", {stdio: "inherit"});
      log("‚úÖ Build das functions conclu√≠do", "success");

      execSync("firebase deploy --only functions", {stdio: "inherit"});
      log("‚úÖ Deploy das functions conclu√≠do", "success");
    } catch (error) {
      log(`‚ùå Erro no deploy: ${error.message}`, "error");
    }

    // 8. Teste da configura√ß√£o
    log("\n8. Testando configura√ß√£o...", "info");

    const testConfig = await question("Fazer teste da configura√ß√£o? (s/n): ");

    if (testConfig.toLowerCase() === "s") {
      try {
        execSync("node scripts/test-flowpay-function.js", {stdio: "inherit"});
        log("‚úÖ Teste conclu√≠do com sucesso", "success");
      } catch (error) {
        log(`‚ö†Ô∏è  Teste falhou: ${error.message}`, "warning");
      }
    }

    // 9. Resumo final
    log("\nüéâ Configura√ß√£o conclu√≠da!", "success");
    console.log("==================================================");
    log("üìã Resumo da configura√ß√£o:", "info");
    console.log(`üîë API Key: ${apiKey.substring(0, 10)}...`);
    console.log(`üåê Dom√≠nio: ${flowpayDomain}`);
    console.log(`üéØ Modo: ${operationMode}`);
    console.log(`üîó App URL: ${appUrl}`);
    console.log(`‚úÖ Success URL: ${successUrl}`);
    console.log(`üîó Webhook URL: ${webhookUrl}`);

    log("\nüöÄ Sistema pronto para produ√ß√£o!", "success");

    if (operationMode === "simulation") {
      log("‚ö†Ô∏è  ATEN√á√ÉO: Sistema em modo de simula√ß√£o", "warning");
      log("Os pagamentos ser√£o simulados para testes", "warning");
    } else if (operationMode === "hybrid") {
      log("‚ö†Ô∏è  ATEN√á√ÉO: Sistema em modo h√≠brido", "warning");
      log("Tentar√° usar API real, com fallback para simula√ß√£o", "warning");
    } else {
      log("‚úÖ Sistema configurado para pagamentos reais", "success");
    }
  } catch (error) {
    log(`üí• Erro durante configura√ß√£o: ${error.message}`, "error");
  } finally {
    rl.close();
  }
}

// Executar configura√ß√£o
setupProductionFlowPay();
